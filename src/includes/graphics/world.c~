#ifndef _C_WORLD
#define _C_WORLD

#include "world.h"

players gplayers;
editor objects[MAX_OBJECTS];
levels level;

/*
 * Author: Robin
 * Description: Initializing player, texture, camera position, gravity.
 *
 */
void player_init(char *file)
{
	gplayers.gravity = 0;
	gplayers.char_texture = load_imageRGBA(file);
    //player.font_texture = load_text("Player 1");
	gplayers.cam_x = 0;
	gplayers.cam_y = 0;
}

/*
 * Author: Robin
 * Description: loads background.
 */
void load_level(char *background)
{
    level.bg_texture = load_imageRGBA(background);
}

/*
 * Author: Sarah
 * Description: Set player position.
 */
void player_set_xy (float x, float y)
{
	gplayers.x = x;
	gplayers.y = y;
}

/*
 * Author: Sarah
 * Description: Set the speed of the character
 */
void player_set_velocity (float xv, float yv)
{
	gplayers.xVel = xv;
	gplayers.yVel = yv;
}

/*
 * Author: Sarah
 * Description: initializing jump function.
 */
void player_set_jump (int jump)
{
	gplayers.jump = jump;
}

/*
 * Author: Robin
 * Description: algorytm for jumping, this will be used by the server.
 */
void player_jump(int screen_maxy)
{
    if(gplayers.jump == 1)
    {
        gplayers.gravity += ((10*(PLAYER_HEIGHT/2))/60);

        if( gplayers.y + PLAYER_HEIGHT < screen_maxy )
        {
            gplayers.y += gplayers.gravity - 160;
        }
        if( gplayers.y + PLAYER_HEIGHT == screen_maxy )
        {
            gplayers.y -= 1;
        }
        if( gplayers.y + PLAYER_HEIGHT > screen_maxy )
        {
            gplayers.y = screen_maxy - PLAYER_HEIGHT;
        }
    }
    if( (gplayers.jump == 1) && (gplayers.y + PLAYER_HEIGHT >= screen_maxy) )
    {
        gplayers.jump = 0;
        gplayers.gravity = 0;
    }
}

/*
 * Author: Sarah
 * Description: move the camera with the player if player trying to leave "camerabox".
 */
void camera_move(int screen_max_x, int screen_max_y)
{
    if( (gplayers.x + PLAYER_WIDTH + gplayers.cam_x) > (screen_max_x-100) )
    {
        if(gplayers.xVel>0)
            gplayers.cam_x -= gplayers.xVel;
    }
    if( (gplayers.x + gplayers.cam_x) < 100 )
    {
        if(gplayers.xVel<0)
            gplayers.cam_x -= gplayers.xVel;
    }
}

/*
 * Author: Robin
 * Description: algorytm for player moving, this will be used by the server.
 */
void player_move(int screen_maxx, int screen_maxy)
{
    //Move the player left or right
    gplayers.x += gplayers.xVel;

    //If the gplayers went too far
    if( ( gplayers.x < 0 ) || ( gplayers.x + PLAYER_WIDTH > screen_maxx*2 ) )
    {
        //Move back
        gplayers.x -= gplayers.xVel;
    }

    //Move the gplayers up or down
    gplayers.y += gplayers.yVel;

    //If the gplayers went too far
    if( ( gplayers.y < 0 ) || ( gplayers.y + PLAYER_HEIGHT > screen_maxy ) )
    {
        //Move back
        gplayers.y -= gplayers.yVel;
    }
}

void drawPlayers(player * players, int noPlayers)
{
	int i;
	SDL_Color * color = malloc(sizeof(color));;
	color->r = 1;
	color->g = 0;
	color->b = 0;
	
	for (i = 0; i < noPlayers; i++) {
		drawBox(&players[i].box, color);
	}
}

void drawObjects(object * objects, int noObjects)
{
	int i;
	SDL_Color * color = malloc(sizeof(SDL_Color));;
	color->r = 0;
	color->g = 1;
	color->b = 1;
	
	for (i = 0; i < noObjects; i++) {
		drawBox(&objects[i].box, color);
	}
}

// Rita ut en box
void drawBox(box * block, SDL_Color * color)
{
	printf("Start drawing box [%d %d %d %d]\n", block->x, block->y, block->width, block->height);
	//Move to offset
	glTranslatef( block->x, block->y, 0 );
	printf("glTranslate\n");
	glBegin( GL_QUADS );
	
		glColor3f(color->r,color->g,color->b);
		printf("glColor\n");
		//Draw player
		glVertex2f(            	0,                 0 );
		glVertex2f( 	block->width,    	           0 );
		glVertex2f( 	block->width, block->height );
		glVertex2f(            	0, block->height );
		printf("glTextCoord\n");
		
	glEnd();
	
	glLoadIdentity();
	glFlush();
	
	//Update screen
	SDL_GL_SwapBuffers();
	
	//Clear the screen
	glClear( GL_COLOR_BUFFER_BIT );
}


/*
 * Author: Robin
 * Description: Frees the texture so we wont get memorey leaking.
 */
void clean_up_world(levels *level, players *gplayers)
{
    glDeleteTextures(1,&gplayers->char_texture);
    glDeleteTextures(1,&level->bg_texture);
}

#endif
