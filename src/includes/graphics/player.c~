#ifndef _C_WORLD
#define _C_WORLD


#include <SDL/SDL.h>
#include <SDL/SDL_opengl.h>

#include "world.h"


void player_init(struct player_t * players, char *file)
{
    players->gravity = 0;
    players->char_texture = load_imageRGBA(file);
}

void load_level(struct level_t3 * level, char *background)
{
    level->bg_texture = load_imageRGBA(background);
}

void player_set_xy (struct player_t * player, float x, float y)
{
  player->x = x;
  player->y = y;
}

void player_set_velocity (struct player_t * player, float xv, float yv)
{
  player->xVel = xv;
  player->yVel = yv;
}

void player_set_jump (struct player_t * player, int jump)
{
    player->jump = jump;
}

void player_set_rgb(struct player_t * player, float r, float g, float b)
{
  player->r = r;
  player->g = g;
  player->b = b;
}

void player_jump(struct player_t * player, int screen_maxy)
{
    if(player->jump == 1)
    {
        player->gravity += ((10*(PLAYER_HEIGHT/2))/60);

        if( player->y + PLAYER_HEIGHT < screen_maxy )
        {
            player->y += player->gravity - 60;
        }
        if( player->y + PLAYER_HEIGHT == screen_maxy )
        {
            player->y -= 1;
        }
        if( player->y + PLAYER_HEIGHT > screen_maxy )
        {
            player->y = screen_maxy - PLAYER_HEIGHT;
        }
    }
    if( (player->jump == 1) && (player->y + PLAYER_HEIGHT >= screen_maxy) )
    {
        player->jump = 0;
        player->gravity = 0;
    }
}

void player_move(struct player_t * player, int screen_maxx, int screen_maxy)
{
    //Move the player left or right
    player->x += player->xVel;

    //If the player went too far
    if( ( player->x < 0 ) || ( player->x + PLAYER_WIDTH > screen_maxx ) )
    {
        //Move back
        player->x -= player->xVel;
    }

    //Move the player up or down
    player->y += player->yVel;

    //If the player went too far
    if( ( player->y < 0 ) || ( player->y + PLAYER_HEIGHT > screen_maxy ) )
    {
        //Move back
        player->y -= player->yVel;
    }
}

void world_show(struct player_t * player,struct level_t3 * level, int screen_max_x, int screen_max_y)
{
    glTranslatef(0,0,0);
    glPushMatrix();
        //Move to offset
        glTranslatef( player->x, player->y, 0 );

        glBegin( GL_QUADS );
        glBindTexture(GL_TEXTURE_2D, player->char_texture);
        //Draw player
        glTexCoord2f(0.0f, 0.0f); glVertex3f( 0,            0,             0 );
        glTexCoord2f(1.0f, 0.0f); glVertex3f( PLAYER_WIDTH, 0,             0 );
        glTexCoord2f(1.0f, 1.0f); glVertex3f( PLAYER_WIDTH, PLAYER_HEIGHT, 0 );
        glTexCoord2f(0.0f, 1.0f); glVertex3f( 0,            PLAYER_HEIGHT, 0 );

        glEnd();
    glPopMatrix();

    glPushMatrix();

        glBindTexture(GL_TEXTURE_2D, level->bg_texture);
        glTranslatef(0,0,0);
        glBegin( GL_QUADS );
            //Draw player
            glTexCoord2f(0.0f, 0.0f); glVertex3f(            0,             0, 0 );
            glTexCoord2f(1.0f, 0.0f); glVertex3f( screen_max_x,             0, 0 );
            glTexCoord2f(1.0f, 1.0f); glVertex3f( screen_max_x, screen_max_y, 0 );
            glTexCoord2f(0.0f, 1.0f); glVertex3f(            0, screen_max_y, 0 );

        glEnd();
    glPopMatrix();

    glLoadIdentity();
}

#endif
